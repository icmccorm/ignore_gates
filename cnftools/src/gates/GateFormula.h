/*************************************************************************************************
CNFTools -- Copyright (c) 2015, Markus Iser, KIT - Karlsruhe Institute of Technology

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 **************************************************************************************************/

#ifndef SRC_GATES_GATEFORMULA_H_
#define SRC_GATES_GATEFORMULA_H_

#include <cstdlib>
#include <algorithm>
#include <vector>
#include <set>

#include "src/util/CNFFormula.h"
#include "src/util/Stamp.h"


enum GateType {
    NONE,
    GENERIC,  // semantically checked
    MONO,  // unchecked monotonic root
    AND,
    OR,
    TRIV,  // trivial equivalence
    EQIV,  // equiv and xor
    FULL
};


struct Gate {
    GateType type = NONE;
    Lit out = lit_Undef;
    For fwd, bwd;
    bool notMono = false;
    std::vector<Lit> inp;

    inline bool isDefined() const { return out != lit_Undef; }
    inline bool hasNonMonotonicParent() const { return notMono; }
};


class GateFormula {
 public:
    std::vector<Cl*> roots;  // top-level clauses
    std::vector<char> inputs;  // mark literals which are used as input to a gate (used in detection of monotonicity)
    std::vector<char> direct;  // non-transitive version of inputs
    std::vector<Gate> gates;  // stores gate-struct for every output
    For remainder;  // stores clauses remaining outside of recognized gate-structure
    bool artificialRoot;  // top-level unit-clause that can be generated by normalizeRoots()
    unsigned verbose_;

    explicit GateFormula(unsigned verbose) :
     roots(), gates(), artificialRoot(false), verbose_(verbose)
    { }

    explicit GateFormula(unsigned nVars, unsigned verbose) :
     roots(), gates(), artificialRoot(false), verbose_(verbose) {
        inputs.resize(2 + 2*nVars, false);
        direct.resize(2 + 2*nVars, false);
        gates.resize(2 + nVars);
    }

    ~GateFormula() {
        if (artificialRoot) {
            for (Cl* clause : getGate(getRoot()).fwd) {
                delete clause;
            }
            delete *roots.begin();
        }
    }

    void addRoot(Cl* clause) {
        roots.push_back(clause);
        for (Lit l : *clause) inputs[l] = true;
    }

    bool isNestedMonotonic(Lit lit) {
        return !inputs[lit] || !inputs[~lit];
    }

    void addGate(GateType type, Lit o, For fwd, For bwd, std::vector<Lit> inp) {
        Gate& gate = gates[o.var()];
        gate.type = type;
        gate.out = o;
        gate.fwd.swap(fwd);
        gate.bwd.swap(bwd);
        gate.notMono = !isNestedMonotonic(o);
        gate.inp.swap(inp);

        for (Lit lit : gate.inp) {
            inputs[lit] = true;
            direct[lit] = true;
            if (gate.notMono) inputs[~lit] = true;
        }

        if (verbose_) {
            unsigned otype = gate.type == MONO ? 10 : gate.type == GENERIC ? 0 : gate.type == TRIV ? 1 : gate.type == AND ? 2 : gate.type == OR ? 3 : 4;
            std::cout << "GateType " << otype << " OutLit " << gate.out << std::endl;
            for (Cl* cl : gate.fwd) std::cout << *cl << "0 ";
            std::cout << std::endl;
            for (Cl* cl : gate.bwd) std::cout << *cl << "0 ";
            std::cout << std::endl << "endG" << std::endl;
        }
    }

    Gate& getGate(Lit output) {
        return gates[output.var()];
    }

    inline bool isGateOutput(Lit output) const {
        return gates[output.var()].isDefined();
    }

    typedef std::vector<Gate>::const_iterator const_iterator;

    inline const_iterator begin() const {
        return gates.begin();
    }

    inline const_iterator end() const {
        return gates.end();
    }

    inline const Gate& operator[] (Var var) const {
        return gates[var];
    }

    inline unsigned nVars() const {
        return gates.size();
    }

    inline unsigned nRoots() const {
        return roots.size();
    }

    inline unsigned nGates() const {
        return std::count_if(gates.begin(), gates.end(), [] (const Gate& gate) {
            return gate.isDefined();
        });
    }

    inline unsigned nMonotonicGates() const {
        return std::count_if(gates.begin(), gates.end(), [] (const Gate& gate) {
            return gate.isDefined() && !gate.hasNonMonotonicParent();
        });
    }

    bool hasArtificialRoot() const {
        return artificialRoot;
    }

    std::vector<Lit> getRoots() {
        std::vector<Lit> result;
        for (Cl* root : roots) {
            result.insert(result.end(), root->begin(), root->end());
        }
        return result;
    }

    // for normalized or single-root problems only
    Lit getRoot() const {
        assert(roots.size() == 1 && roots.front()->size() == 1);
        // std::cout << roots.size() << " " << roots.front()->size();
        return roots.front()->front();
    }

    /**
     * Execute after analysis in order to transform many roots to one big and gate with one output
     * Side-effect: introduces a fresh variable
     */
    void normalizeRoots() {
        Var root = Var(gates.size()-1);
        gates[root].out = Lit(root, false);
        gates[root].notMono = false;
        std::set<Lit> inp;
        roots.insert(roots.end(), remainder.begin(), remainder.end());
        remainder.clear();
        for (Cl* c : roots) {
            inp.insert(c->begin(), c->end());
            c->push_back(Lit(root, true));
            gates[root].fwd.push_back(new Cl(*c));
        }
        gates[root].inp.insert(gates[root].inp.end(), inp.begin(), inp.end());
        roots.clear();
        roots.push_back(new Cl({gates[root].out}));
        artificialRoot = true;
    }

    /**
     * @brief GateAnalyzer::getPrunedProblem
     * @param model
     * @return clauses of all satisfied branches
     */
    For getPrunedProblem(const std::vector<uint8_t>& model) {
        For result(roots.begin(), roots.end());

        std::vector<Lit> literals;
        for (const Cl* c : roots) {
            literals.insert(literals.end(), c->begin(), c->end());
        }
        std::sort(literals.begin(), literals.end());
        literals.erase(std::unique(literals.begin(), literals.end()), literals.end());

        Stamp<uint8_t> visited { gates.size() };

        while (literals.size() > 0) {
            Lit o = literals.back();
            literals.pop_back();
            Gate gate = gates[o.var()];

            if (!gate.isDefined()) continue;

            if (!visited[o.var()] && (gate.hasNonMonotonicParent() || model[o])) {  // Skip "don't cares"
                std::copy(gate.fwd.begin(), gate.fwd.end(), result.end());
                if (gate.hasNonMonotonicParent()) {  // BCE
                    std::copy(gate.bwd.begin(), gate.bwd.end(), result.end());
                }
                literals.insert(literals.end(), gate.inp.begin(), gate.inp.end());
                visited.set(o.var());
            }
        }

        result.insert(result.end(), remainder.begin(), remainder.end());

        return result;
    }
};

#endif  // SRC_GATES_GATEFORMULA_H_
